name: "Generate GitHub Release Notes"
description: "Generate GitHub release notes from git commits"

inputs:
  previous_tag:
    description: "The previous tag to compare against"
    required: true
  repo_url:
    description: "The URL of the repository"
    required: true

outputs:
  new_version:
    description: "Incremented github tag number"
    value: ${{ steps.increment_version.outputs.new_version }}
  release_notes:
    description: "Generated release notes from git commits"
    value: "${{ steps.generate_notes.outputs.release_notes }}"
  bugsnag_version:
    description: "The app version to use for Bugsnag"
    value: ${{ steps.compute_bugsnag_app_version.outputs.app_version }}

runs:
  using: "composite"
  steps:
    - name: Increment version
      id: increment_version
      shell: bash
      run: |
        # Remove 'v' prefix if present and split the version into major, minor, patch components
        tag_without_v="${{ inputs.previous_tag }}"
        tag_without_v="${tag_without_v#v}"
        IFS='.' read -r major minor patch <<< "$tag_without_v"

        # Validate that we have all three components
        if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
          echo "Error: Invalid tag format. Expected format: v1.2.3 or 1.2.3"
          exit 1
        fi

        # Increment the patch number
        patch=$((patch + 1))
        new_version="v$major.$minor.$patch"
        echo "new_version=${new_version}" >> $GITHUB_ENV
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: generate_notes
      shell: bash
      run: |
        previous_tag="${{ inputs.previous_tag }}"
        repo_url="${{ inputs.repo_url }}"

        # Validate that the previous tag exists
        if ! git rev-parse --verify "$previous_tag" >/dev/null 2>&1; then
          echo "Error: Tag '$previous_tag' does not exist"
          exit 1
        fi

        # Debug: Show what commits exist in the range (including merges)
        echo "üîç DEBUG: All commits in range (including merges):"
        git log "$previous_tag"..HEAD --pretty=format:"%H|%s|%an|%ae" 2>/dev/null | head -10
        echo "üîç DEBUG: Total commits in range (including merges): $(git log "$previous_tag"..HEAD --pretty=format:"%H" 2>/dev/null | wc -l)"

        # Get all commits in the range (excluding merge commits for cleaner output)
        all_commits=$(git log "$previous_tag"..HEAD --no-merges --pretty=format:"%H|%s|%an|%ae" 2>/dev/null)

        # Debug: Show what we got from git log after --no-merges
        echo "üîç DEBUG: Commits after --no-merges filter:"
        echo "$all_commits"
        echo "üîç DEBUG: Commits after --no-merges count: $(echo "$all_commits" | wc -l)"

        # Count the actual commits we'll be processing (excluding merges)
        commit_count=$(echo "$all_commits" | wc -l)

        if [[ "$commit_count" -eq 0 ]]; then
          # If no non-merge commits, check if there are any merge commits
          merge_commits=$(git log "$previous_tag"..HEAD --merges --pretty=format:"%H|%s|%an|%ae" 2>/dev/null)
          merge_count=$(echo "$merge_commits" | wc -l)
          
          if [[ "$merge_count" -gt 0 ]]; then
            echo "üîç DEBUG: No regular commits found, but found $merge_count merge commits"
            echo "üîç DEBUG: Merge commits:"
            echo "$merge_commits"
            formatted_notes="No new feature commits (only merge commits)"
          else
            formatted_notes="No new commits"
          fi
        else
          formatted_notes=""

          # Process each commit using a robust method
          if [[ -n "$all_commits" ]]; then
            # Use a temporary file to avoid subshell and newline issues
            temp_file=$(mktemp)
            printf "%s\n" "$all_commits" > "$temp_file"
            
            while IFS='|' read -r commit_hash commit_message commit_author commit_email; do
              if [[ -n "$commit_hash" && -n "$commit_message" ]]; then
                # Skip merge commits (additional filtering)
                if [[ "$commit_message" =~ ^Merge\ pull\ request || "$commit_message" =~ ^Merge\ branch ]]; then
                  echo "üîç DEBUG: Skipping merge commit: $commit_message"
                  continue
                fi
                
                # Clean up commit message (escape backticks and quotes)
                commit_message=$(echo "$commit_message" | sed 's/`/\\`/g' | sed 's/"/\\"/g')
                
                # Format author
                if [[ "$commit_author" =~ " " ]]; then
                  github_author="${commit_author} (${commit_email})"
                else
                  github_author="@${commit_author}"
                fi
                
                # Check if this commit message contains a PR number
                pr_info=""
                set +e  # Disable exit on error temporarily
                pr_number=$(echo "$commit_message" | grep -oE "#[0-9]+" | head -1)
                set -e  # Re-enable exit on error
                if [[ -n "$pr_number" ]]; then
                  pr_link="[${pr_number}](${repo_url}/pull/${pr_number:1})"
                  pr_info=" in ${pr_link}"
                fi
                
                # Add to formatted notes
                formatted_notes="${formatted_notes}\n- ${commit_hash:0:7} - ${commit_message} by ${github_author}${pr_info}"
              fi
            done < "$temp_file"
            
            # Clean up temporary file
            rm -f "$temp_file"
          fi
        fi

        if [[ -z "$formatted_notes" ]]; then
          formatted_notes="No new commits"
        fi

        # Debug: Echo the formatted notes
        echo "=== FORMATTED NOTES ==="
        echo -e "${formatted_notes}"
        echo "=== END FORMATTED NOTES ==="

        # Export the formatted notes to the GitHub environment
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo -e "${formatted_notes}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Compute Bugsnag App Version
      id: compute_bugsnag_app_version
      shell: bash
      run: |
        # Assign new_version from earlier step output to a shell variable
        new_version="${{ steps.increment_version.outputs.new_version }}"
        release_notes="${{ steps.generate_notes.outputs.release_notes }}"

        # Initialize app_version with new_version
        app_version="$new_version"

        # Conditional assignment based on release_notes output
        if [[ "$release_notes" == "No new commits" ]]; then
          app_version="${{ inputs.previous_tag }}"
        fi

        # Set the app_version as an output
        echo "app_version=$app_version" >> $GITHUB_OUTPUT
